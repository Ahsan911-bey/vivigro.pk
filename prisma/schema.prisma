generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(uuid())
  name      String
  email     String     @unique
  password  String
  role      Role       @default(USER)
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  cartItems CartItem[]
  orders    Order[]
}

model Product {
  id             String         @id @default(uuid())
  name           String
  description    String
  price          Float
  quantity       Int
  category       Category
  videoUrl       String?
  sizeOptions    String[]      @default([])
  packagingType  String?
  type           String?
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  cartItems      CartItem[]
  orderItems     OrderItem[]
  images         ProductImage[]
  ProductVideo   ProductVideo[]
  reviews        Review[]
}

model ProductImage {
  id        String  @id @default(uuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model ProductVideo {
  id        String  @id @default(uuid())
  url       String
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model CartItem {
  id        String  @id @default(uuid())
  userId    String
  productId String
  quantity  Int
  product   Product @relation(fields: [productId], references: [id])
  user      User    @relation(fields: [userId], references: [id])
}

model Order {
  id            String      @id @default(cuid())
  userId        String
  totalAmount   Float
  status        OrderStatus @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  stock_updated Boolean     @default(false)
  first_name    String
  last_name     String
  email         String
  phone         String
  address       String
  city          String
  state         String
  paymentMethod String
  user          User        @relation(fields: [userId], references: [id])
  items         OrderItem[]

  @@index([userId])
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])
}

model Review {
  id            String   @id @default(uuid())
  productId     String
  reviewerName  String
  reviewText    String
  starRating    Int      @db.SmallInt
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  product       Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
}

enum Category {
  TEXTILE
  FERTILIZER
}

enum Role {
  USER
  ADMIN
}

enum PaymentMethod {
  STRIPE
  PAYFAST
}

enum OrderStatus {
  PENDING
  COMPLETED
  FAILED
}
